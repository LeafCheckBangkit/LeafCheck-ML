# -*- coding: utf-8 -*-
"""Model Prediction FIX.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gvYTFR07e0FpOdU3ReJMasDNvv1YlV-4

Import Library
"""

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras import layers, Model
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from google.colab import drive, files

# Mount Google Drive
drive.mount('/content/drive')

train_dir = "/content/drive/Shareddrives/LeafCheck_Capstone/dataset 3/train"
test_dir = "/content/drive/Shareddrives/LeafCheck_Capstone/dataset 3/test"

# Function to display a few images from each class
def display_sample_images():
    categories = ["mango healthy", "mango non healthy", "apple healthy", "apple non healthy", "orange healthy", "orange non healthy"]
    fig, axes = plt.subplots(2, 3, figsize=(15, 10))

    for category, ax in zip(categories, axes.flatten()):
        image_path = os.path.join(train_dir, category, os.listdir(os.path.join(train_dir, category))[0])
        img = mpimg.imread(image_path)
        ax.imshow(img)
        ax.set_title(category)
        ax.axis('off')

    plt.show()

display_sample_images()

# Data generators
def cutout(img, mask_size):
    h, w, _ = img.shape
    mask_value = img.mean()

    top = np.random.randint(0, h - mask_size)
    left = np.random.randint(0, w - mask_size)
    bottom = top + mask_size
    right = left + mask_size

    img[top:bottom, left:right, :] = mask_value

    return img

def train_test_generators(train_dir, test_dir):
    train_datagen = ImageDataGenerator(
        rescale=1./255,
        rotation_range=40,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode="nearest",
        preprocessing_function=lambda img: cutout(img, mask_size=16)
    )

    train_generator = train_datagen.flow_from_directory(
        directory=train_dir,
        batch_size=32,
        class_mode="categorical",
        target_size=(150, 150)
    )

    test_datagen = ImageDataGenerator(rescale=1/255)

    test_generator = test_datagen.flow_from_directory(
        directory=test_dir,
        batch_size=32,
        class_mode="categorical",
        target_size=(150, 150)
    )

    return train_generator, test_generator

train_generator, test_generator = train_test_generators(train_dir, test_dir)

#from tensorflow.keras.applications.inception_v3 import InceptionV3

# Model creation
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(6, activation='softmax')
])

model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])

"""##Training Model"""

class EarlyStop(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95 and logs.get('val_accuracy')>0.95):
      print("\nModel have reached 96%")
      self.model.stop_training = True

callbacks = EarlyStop()
# Training the model
history = model.fit(
    train_generator,
    validation_data=test_generator,
    epochs=50, callbacks= callbacks
)

"""##Model evaluate"""

# Evaluation
train_loss, train_acc = model.evaluate(train_generator)
print('Train Accuracy', train_acc)

val_loss, val_acc = model.evaluate(test_generator)
print('Validation Accuracy', val_acc)

history.history

# Plotting accuracy
plt.plot(history.history['accuracy'], color='red', label='Training Accuracy')
plt.plot(history.history['val_accuracy'], color='blue', label='Validation Accuracy')
plt.xlabel('No. of Epochs')
plt.title('Visualization of Accuracy Result')
plt.legend()
plt.show()


# Plotting los
plt.plot(history.history['loss'], color='red', label='loss')
plt.plot(history.history['val_loss'], color='blue', label='Validation loss')
plt.xlabel('No. of Epochs')
plt.title('Visualization of loss Result')
plt.legend()
plt.show()

model.save('Pred_model_FIX0.95.h5')

"""##Model Prediction"""

upload = files.upload()

for fn in upload.keys():
    path = '/content/' + fn
    img = load_img(path, target_size=(150, 150))
    x = img_to_array(img)
    x /= 255.0
    x = np.expand_dims(x, axis=0)

    images = np.vstack([x])
    classes = model.predict(images, batch_size=10)
    print(classes[0])
    predicted_class = np.argmax(classes[0])


    if predicted_class == 0:
        label = "healthy apple leaves"
    elif predicted_class == 1:
        label = "unhealthy apple leaves"
    elif predicted_class == 2:
        label = "healthy mango leaves"
    elif predicted_class == 3:
        label = "unhealthy mango leaves"
    elif predicted_class == 4:
        label = "healthy orange leaves"
    elif predicted_class == 5:
        label = "unhealthy orange leaves"

    print(fn + " is " + label)

    # Plot the image
    plt.imshow(load_img(path, target_size=(150, 150)))
    plt.axis('off')
    plt.title(f'{label}')
    plt.show()

